{"version":3,"sources":["components/PageHeader.js","models/Location.js","components/LocationsMap.js","components/LocationsTable.js","config/AppConfig.js","App.js","serviceWorker.js","index.js"],"names":["PageHeader","state","activeIndex","handleClick","e","titleProps","index","newIndex","setState","this","Accordion","styled","fluid","Title","active","onClick","Icon","name","Content","React","Component","Location","entry","getGSXValue","key","$t","id","shouldBeShown","status","cusine","area","hours","delivery","pickup","giftcards","dietaryNeeds","address","comments","website","deliverySite","fantuan","lat","long","lat1","lon1","lat2","lon2","sin","Math","cos","sqrt","atan2","PI","degreesToRadians","degrees","dLat","dLon","lat1x","lat2x","a","distanceInKmBetweenEarthCoordinates","commonIconProperties","iconSize","iconAnchor","popupAnchor","shadowSize","shadowUrl","greenIcon","L","iconUrl","yellowIcon","redIcon","statusIcons","Open","Closed","LocationsMap","renderLocationMarker","location","generateBoldedField","label","data","icon","websiteLink","href","deliverySiteLink","fantuanLink","Marker","ref","props","setRef","position","Popup","googleMapsLink","userPosition","lng","locationsWithMapData","locations","filter","hasLocationData","center","zoom","TileLayer","url","attribution","draggable","onDragend","handleMarkerDragEnd","Circle","radius","filterRadius","map","bind","LocationsTable","renderTableRow","locationHasSkipOrUberEats","locationHasFantuan","deliveryIsUberEats","includes","Table","Row","className","onRowClick","keysToInclude","Cell","Label","as","color","size","locationsTodisplay","compact","Header","HeaderCell","keysToColumnNames","Body","urls","spreadsheetID","worksheetID","cssClasses","defaultStates","isFilterSet","defaultProps","type","labelPosition","min","max","step","simpleStyles","greenFloatLeft","backgroundColor","float","greenFloatRight","labels","GoogleSheetsParser","fetch","googleSheetsURL","response","json","entriesJSON","feed","App","mapPopupRefs","Map","mapContainerRef","createRef","set","resetLocationFilter","updatedLocations","openMapPopupByName","popupRef","get","leafletElement","openPopup","current","scrollIntoView","populateLocationsFromGoogleSheets","getLocationsFromGoogleSheets","Button","style","handleGetMyLocation","Input","basic","content","value","onChange","handleFilterRadiusChanged","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","filterByDistance","err","alert","event","target","_latlng","distanceToMarker","distanceToLocationMeters","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7fc08d2c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Accordion, Icon } from \"semantic-ui-react\";\r\n\r\nclass PageHeader extends React.Component {\r\n  state = { activeIndex: 0 };\r\n\r\n  handleClick = (e, titleProps) => {\r\n    const { index } = titleProps;\r\n    const { activeIndex } = this.state;\r\n    const newIndex = activeIndex === index ? -1 : index;\r\n\r\n    this.setState({ activeIndex: newIndex });\r\n  };\r\n\r\n  render() {\r\n    const { activeIndex } = this.state;\r\n\r\n    return (\r\n      <Accordion styled fluid>\r\n        <Accordion.Title active={activeIndex === 0} index={0} onClick={this.handleClick}>\r\n          Welcome\r\n          <Icon name=\"dropdown\" />\r\n        </Accordion.Title>\r\n        <Accordion.Content active={activeIndex === 0}>\r\n          <p>Hello friends,</p>\r\n          <p>\r\n            As y'all probably know, the COVID19 crisis is hitting everyone hard, especially small businesses.\r\n            A lot of restaurants/food services are switching to takeout/delivery only, or closing. It'd be\r\n            pretty sick if we could support them, so I've started a crowdsourcing spreadsheet for all the\r\n            Asian restaurants/businesses in Edmonton that are open for pickup or takeout 😁 that everyone can\r\n            use, or contribute to. I'd be pretty sad if all my fav places were closed in 2 months, so pls help\r\n            a girl out and try to prevent that from happening.\r\n          </p>\r\n          <p>Click on the pins or on a row in the table to get started!</p>\r\n        </Accordion.Content>\r\n        <Accordion.Title active={activeIndex === 1} index={1} onClick={this.handleClick}>\r\n          About\r\n          <Icon name=\"dropdown\" />\r\n        </Accordion.Title>\r\n        <Accordion.Content active={activeIndex === 1}>\r\n          <p>\r\n            You can drag the blue marker below to find nearby restaurants. You can also use the \"My Location\r\n            button\" on compatible devices to go to your current location too!\r\n          </p>\r\n        </Accordion.Content>\r\n      </Accordion>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageHeader;\r\n","function distanceInKmBetweenEarthCoordinates(lat1, lon1, lat2, lon2) {\r\n  const { sin, cos, sqrt, atan2, PI } = Math;\r\n  function degreesToRadians(degrees) {\r\n    return (degrees * PI) / 180;\r\n  }\r\n\r\n  const earthRadiusKm = 6371;\r\n\r\n  const dLat = degreesToRadians(lat2 - lat1);\r\n  const dLon = degreesToRadians(lon2 - lon1);\r\n\r\n  const lat1x = degreesToRadians(lat1);\r\n  const lat2x = degreesToRadians(lat2);\r\n\r\n  const a = sin(dLat / 2) * sin(dLat / 2) + sin(dLon / 2) * sin(dLon / 2) * cos(lat1x) * cos(lat2x);\r\n  const c = 2 * atan2(sqrt(a), sqrt(1 - a));\r\n  return earthRadiusKm * c;\r\n}\r\n\r\nclass Location {\r\n  // Data class representing one row from the Google Sheets Document.\r\n  constructor(entry) {\r\n    function getGSXValue(key) {\r\n      return entry[`gsx$${key}`].$t;\r\n    }\r\n    // Unpacks interesting entries from the Google Sheets JSON API into a simpler object.\r\n    this.id = entry.id.$t;\r\n    this.shouldBeShown = true;\r\n\r\n    this.name = getGSXValue(\"name\");\r\n    this.status = getGSXValue(\"status\");\r\n    this.cusine = getGSXValue(\"cusine\");\r\n    this.area = getGSXValue(\"area\");\r\n    this.hours = getGSXValue(\"hours-unsureofcovid-19hours\");\r\n    this.delivery = getGSXValue(\"delivery\");\r\n    this.pickup = getGSXValue(\"pickup\");\r\n    this.giftcards = getGSXValue(\"giftcards\");\r\n    this.dietaryNeeds = getGSXValue(\"dietaryneedsserved\");\r\n    this.address = getGSXValue(\"address\");\r\n    this.comments = getGSXValue(\"comments\");\r\n    this.website = getGSXValue(\"website\");\r\n    this.deliverySite = getGSXValue(\"deliverysite\");\r\n    this.fantuan = getGSXValue(\"fantuan\");\r\n    this.lat = getGSXValue(\"lat\");\r\n    this.long = getGSXValue(\"long\");\r\n  }\r\n\r\n  hasLocationData() {\r\n    return !!this.lat && !!this.long;\r\n  }\r\n\r\n  distanceToLocationMeters(lat, long) {\r\n    return distanceInKmBetweenEarthCoordinates(lat, long, this.lat, this.long) * 1000;\r\n  }\r\n\r\n  get googleMapsLink() {\r\n    return `https://google.com/maps/search/${this.address}`;\r\n  }\r\n\r\n  // TODO: Probably add some functionality to unpack attributes (addresses, hours, cusine types etc...)\r\n  // TODO: Maybe add resolvers to Google Maps, Food Delivery etc...\r\n}\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport L from \"leaflet\";\r\n\r\nimport { Map, Marker, Popup, TileLayer, Circle } from \"react-leaflet\";\r\n\r\nconst commonIconProperties = {\r\n  iconSize: [18, 25],\r\n  iconAnchor: [12, 25],\r\n  popupAnchor: [1, -30],\r\n  shadowSize: [25, 25],\r\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\r\n};\r\n\r\nconst greenIcon = new L.Icon({\r\n  ...commonIconProperties,\r\n  iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png\",\r\n});\r\n\r\nconst yellowIcon = new L.Icon({\r\n  ...commonIconProperties,\r\n  iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-yellow.png\",\r\n});\r\n\r\nconst redIcon = new L.Icon({\r\n  ...commonIconProperties,\r\n  iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png\",\r\n});\r\n\r\nconst orangeIcon = new L.Icon({\r\n  ...commonIconProperties,\r\n  iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-orange.png\",\r\n});\r\n\r\nconst statusIcons = {\r\n  Open: greenIcon,\r\n  \"Appears Closed\": orangeIcon,\r\n  Closed: redIcon,\r\n  \"\": yellowIcon,\r\n};\r\n\r\nclass LocationsMap extends React.Component {\r\n  // Leaflet map used to display locations. Uses a combination of 'leaflet' and 'react-leaflet' to render.\r\n\r\n  render() {\r\n    const userPosition = [this.props.lat, this.props.lng];\r\n    const locationsWithMapData = this.props.locations.filter((location) => {\r\n      return location.hasLocationData() && location.shouldBeShown;\r\n    });\r\n\r\n    return (\r\n      <Map center={userPosition} zoom={this.props.zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        <Marker position={userPosition} draggable={true} onDragend={this.props.handleMarkerDragEnd}>\r\n          <Popup>\r\n            <p>\r\n              You can drag this around to filter for locations nearby! Alternatively, click on the \"My\r\n              Location\" button to set this to your current location.\r\n            </p>\r\n          </Popup>\r\n        </Marker>\r\n        <Circle center={userPosition} radius={this.props.filterRadius * 1000} />\r\n        {locationsWithMapData.map(this.renderLocationMarker.bind(this))}\r\n      </Map>\r\n    );\r\n  }\r\n\r\n  renderLocationMarker = (location) => {\r\n    // Helper function to render location map markers.\r\n    const generateBoldedField = (label, data) => (\r\n      <div>\r\n        <b>{label}: </b>\r\n        {data || \"--\"}\r\n      </div>\r\n    );\r\n\r\n    const icon = statusIcons[location.status] || yellowIcon;\r\n\r\n    const websiteLink = location.website ? <a href={location.website}>ResturantWebsite</a> : \"\";\r\n    const deliverySiteLink = location.deliverySite ? <a href={location.deliverySite}>Delivery</a> : \"\";\r\n    const fantuanLink = location.fantuan ? <a href={location.fantuan}>Fantuan</a> : \"\";\r\n\r\n    return (\r\n      <Marker\r\n        ref={(ref) => this.props.setRef(location.name, ref)}\r\n        key={location.name}\r\n        position={[location.lat, location.long]}\r\n        icon={icon}\r\n      >\r\n        <Popup>\r\n          <h5>{location.name}</h5>\r\n          <span>\r\n            <a href={location.googleMapsLink}>GoogleMaps</a> {websiteLink} {deliverySiteLink} {fantuanLink}\r\n          </span>\r\n          <hr />\r\n          {generateBoldedField(\"Address\", location.address)}\r\n          {generateBoldedField(\"Hours\", location.hours)}\r\n          {generateBoldedField(\"Cusine\", location.cusine)}\r\n          {generateBoldedField(\"Notes\", location.comments)}\r\n        </Popup>\r\n      </Marker>\r\n    );\r\n  };\r\n}\r\n\r\nexport default LocationsMap;\r\n","import React from \"react\";\r\n\r\nimport { Table, Label } from \"semantic-ui-react\";\r\n\r\nclass LocationsTable extends React.Component {\r\n  // Renders a table from an array of locations.\r\n\r\n  // Table to display list of locations\r\n  static keysToInclude = [\r\n    \"name\",\r\n    \"status\",\r\n    \"cusine\",\r\n    \"hours\",\r\n    \"delivery\",\r\n    \"pickup\",\r\n    \"giftcards\",\r\n    \"dietaryNeeds\",\r\n    \"comments\",\r\n  ];\r\n\r\n  static keysToColumnNames = {\r\n    name: \"Business Name\",\r\n    status: \"Status\",\r\n    cusine: \"Cusine\",\r\n    hours: \"Hours\",\r\n    delivery: \"Delivery\",\r\n    pickup: \"Pickup\",\r\n    giftcards: \"Gift Cards\",\r\n    dietaryNeeds: \"Diet Needs\",\r\n    address: \"Address\",\r\n    comments: \"Notes\",\r\n  };\r\n\r\n  render() {\r\n    const locationsTodisplay = this.props.locations.filter((location) => location.shouldBeShown);\r\n\r\n    return (\r\n      <Table compact size=\"small\">\r\n        <Table.Header>\r\n          {LocationsTable.keysToInclude.map((key) => (\r\n            <Table.HeaderCell key={`header:${key}`}>{LocationsTable.keysToColumnNames[key]}</Table.HeaderCell>\r\n          ))}\r\n        </Table.Header>\r\n        <Table.Body>{locationsTodisplay.map(this.renderTableRow)}</Table.Body>;\r\n      </Table>\r\n    );\r\n  }\r\n\r\n  renderTableRow = (location) => {\r\n    const locationHasSkipOrUberEats = !!location.deliverySite;\r\n    const locationHasFantuan = !!location.fantuan;\r\n    const deliveryIsUberEats = !!location.deliverySite && location.deliverySite.includes(\"ubereats.com\");\r\n    return (\r\n      <Table.Row\r\n        key={location.name}\r\n        className=\"location-data-row\"\r\n        onClick={() => this.props.onRowClick(location.name)}\r\n      >\r\n        {LocationsTable.keysToInclude.map((key) => {\r\n          if (key === \"delivery\" && locationHasSkipOrUberEats) {\r\n            return (\r\n              <Table.Cell>\r\n                <Label\r\n                  as=\"a\"\r\n                  href={location.deliverySite}\r\n                  color={deliveryIsUberEats ? \"green\" : \"red\"}\r\n                  size=\"mini\"\r\n                >\r\n                  {deliveryIsUberEats ? \"UberEats\" : \"SkipTheDishes\"}\r\n                </Label>\r\n                {locationHasFantuan ? (\r\n                  <Label as=\"a\" href={location.fantuan} color=\"yellow\" size=\"mini\">\r\n                    Fantuan\r\n                  </Label>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </Table.Cell>\r\n            );\r\n          }\r\n\r\n          return <Table.Cell key={`${location.name}:${key}`}>{location[key]}</Table.Cell>;\r\n        })}\r\n      </Table.Row>\r\n    );\r\n  };\r\n}\r\n\r\nexport default LocationsTable;\r\n","export const urls = {\r\n  spreadsheetID: \"1YvbMUEEGha3hEQ6CDd0K1C4WVkAMmszbBRuRQ-ndxKU\",\r\n  worksheetID: \"oc6o2es\",\r\n  get googleSheetsURL() {\r\n    return `https://spreadsheets.google.com/feeds/list/${this.spreadsheetID}/${this.worksheetID}/public/values?alt=json`;\r\n  },\r\n};\r\n\r\nexport const cssClasses = {\r\n  mapContainer: \"map-container\",\r\n  mapControls: \"map-buttons\",\r\n  mapButtons: \"ui button\",\r\n};\r\n\r\nexport const defaultStates = {\r\n  app: {\r\n    isFilterSet: false,\r\n    locations: [],\r\n    lat: 53.5461,\r\n    lng: -113.4938,\r\n    zoom: 11,\r\n    filterRadius: 5,\r\n  },\r\n};\r\n\r\nexport const defaultProps = {\r\n  locationSlider: {\r\n    type: \"range\",\r\n    labelPosition: \"right\",\r\n\r\n    min: 1,\r\n    max: 10,\r\n    step: 0.1,\r\n  },\r\n};\r\n\r\nexport const simpleStyles = {\r\n  greenFloatLeft: { backgroundColor: \"limegreen\", float: \"left\" },\r\n  greenFloatRight: { backgroundColor: \"limegreen\", float: \"right\" },\r\n};\r\n\r\nexport const labels = {\r\n  getCurrentLocation: \"My Location\",\r\n  filterNearLocation: \"Filter Near Location\",\r\n  resetLocationFilter: \"Reset Location Filter\",\r\n};\r\n","import React from \"react\";\r\nimport { Button, Input } from \"semantic-ui-react\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport PageHeader from \"./components/PageHeader\";\r\nimport Location from \"./models/Location\";\r\nimport LocationsMap from \"./components/LocationsMap\";\r\nimport LocationsTable from \"./components/LocationsTable\";\r\n\r\nimport { urls, simpleStyles, cssClasses, defaultStates, defaultProps, labels } from \"./config/AppConfig.js\";\r\n\r\nclass GoogleSheetsParser {\r\n  // Handler for requesting and parsing Google Sheets lists requests.\r\n  static async getLocationsFromGoogleSheets() {\r\n    const response = await fetch(urls.googleSheetsURL);\r\n    const json = await response.json();\r\n\r\n    const entriesJSON = json.feed.entry;\r\n    return entriesJSON.map((entry) => {\r\n      return new Location(entry);\r\n    });\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  state = { ...defaultStates.app };\r\n  mapPopupRefs = new Map();\r\n  mapContainerRef = React.createRef();\r\n\r\n  setRef = (key, ref) => {\r\n    this.mapPopupRefs.set(key, ref);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.populateLocationsFromGoogleSheets();\r\n  }\r\n\r\n  async populateLocationsFromGoogleSheets() {\r\n    this.setState({\r\n      locations: await GoogleSheetsParser.getLocationsFromGoogleSheets(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <PageHeader></PageHeader>\r\n        <div ref={this.mapContainerRef} className={cssClasses.mapContainer}>\r\n          <LocationsMap\r\n            {...this.state}\r\n            handleMarkerDragEnd={this.handleMarkerDragEnd.bind(this)}\r\n            setRef={this.setRef}\r\n          ></LocationsMap>\r\n          <div className={cssClasses.mapControls}>\r\n            <Button\r\n              size=\"small\"\r\n              className={cssClasses.mapButtons}\r\n              style={simpleStyles.greenFloatLeft}\r\n              onClick={this.handleGetMyLocation.bind(this)}\r\n            >\r\n              {labels.getCurrentLocation}\r\n            </Button>\r\n            <Input\r\n              {...defaultProps.locationSlider}\r\n              label={{\r\n                basic: true,\r\n                content: `Within ${this.state.filterRadius} Km`,\r\n              }}\r\n              value={this.state.filterRadius}\r\n              onChange={this.handleFilterRadiusChanged.bind(this)}\r\n              style={simpleStyles.greenFloatLeft}\r\n              size=\"tiny\"\r\n            />\r\n            <Button\r\n              size=\"small\"\r\n              className={cssClasses.mapButtons}\r\n              onClick={this.resetLocationFilter.bind(this)}\r\n              style={simpleStyles.greenFloatRight}\r\n            >\r\n              Show All Locations\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <LocationsTable\r\n          locations={this.state.locations}\r\n          onRowClick={this.openMapPopupByName.bind(this)}\r\n        ></LocationsTable>\r\n      </div>\r\n    );\r\n  }\r\n  handleGetMyLocation() {\r\n    const success = (pos) => {\r\n      const crd = pos.coords;\r\n      this.setState({ lat: crd.latitude, lng: crd.longitude });\r\n      this.filterByDistance();\r\n    };\r\n\r\n    const error = (err) => {\r\n      alert(\"We couldn't seem to get your location. Did you enable some sort of privacy mode?\");\r\n    };\r\n\r\n    navigator.geolocation.getCurrentPosition(success, error);\r\n  }\r\n\r\n  handleMarkerDragEnd(event) {\r\n    const { lat, lng } = event.target._latlng;\r\n    this.setState({ lat, lng });\r\n    this.filterByDistance();\r\n  }\r\n\r\n  handleFilterRadiusChanged(event) {\r\n    this.setState({ filterRadius: event.target.value });\r\n    this.filterByDistance();\r\n  }\r\n\r\n  filterByDistance() {\r\n    const updatedLocations = this.state.locations.map((location) => {\r\n      const distanceToMarker = location.distanceToLocationMeters(this.state.lat, this.state.lng);\r\n      location.shouldBeShown = distanceToMarker <= this.state.filterRadius * 1000 ? true : false;\r\n\r\n      return location;\r\n    });\r\n\r\n    this.setState({ locations: updatedLocations });\r\n  }\r\n\r\n  resetLocationFilter = () => {\r\n    const updatedLocations = this.state.locations.map((location) => {\r\n      location.shouldBeShown = true;\r\n      return location;\r\n    });\r\n\r\n    this.setState({ locations: updatedLocations });\r\n  };\r\n\r\n  openMapPopupByName = (name) => {\r\n    const popupRef = this.mapPopupRefs.get(name);\r\n    if (popupRef && popupRef.leafletElement) {\r\n      popupRef.leafletElement.openPopup();\r\n      this.mapContainerRef.current.scrollIntoView(false);\r\n    }\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}