{"version":3,"sources":["components/PageHeader.js","models/Location.js","components/LocationsMap.js","components/LocationsTable.js","config/AppConfig.js","App.js","serviceWorker.js","index.js"],"names":["PageHeader","Message","size","Header","React","Component","Location","entry","getGSXValue","key","$t","this","id","shouldBeShown","name","status","cusine","area","hours","delivery","pickup","giftcards","dietaryNeeds","address","comments","website","deliverySite","fantuan","lat","long","lat1","lon1","lat2","lon2","sin","Math","cos","sqrt","atan2","PI","degreesToRadians","degrees","dLat","dLon","lat1x","lat2x","a","distanceInKmBetweenEarthCoordinates","commonIconProperties","iconSize","iconAnchor","popupAnchor","shadowSize","shadowUrl","greenIcon","L","Icon","iconUrl","yellowIcon","redIcon","statusIcons","Open","Closed","LocationsMap","renderLocationMarker","location","generateBoldedField","label","data","icon","websiteLink","href","deliverySiteLink","fantuanLink","Marker","ref","props","setRef","position","Popup","googleMapsLink","userPosition","lng","locationsWithMapData","locations","filter","hasLocationData","center","zoom","TileLayer","url","attribution","draggable","onDragend","handleMarkerDragEnd","Circle","radius","filterRadius","map","bind","LocationsTable","renderTableRow","locationHasSkipOrUberEats","locationHasFantuan","deliveryIsUberEats","includes","Table","Row","className","onClick","onRowClick","keysToInclude","Cell","Label","as","color","locationsTodisplay","compact","HeaderCell","keysToColumnNames","Body","urls","spreadsheetID","worksheetID","cssClasses","defaultStates","isFilterSet","defaultProps","type","labelPosition","min","max","step","simpleStyles","greenFloatLeft","backgroundColor","float","greenFloatRight","labels","GoogleSheetsParser","fetch","googleSheetsURL","response","json","entriesJSON","feed","App","state","mapPopupRefs","Map","mapContainerRef","createRef","set","resetLocationFilter","updatedLocations","setState","openMapPopupByName","popupRef","get","leafletElement","openPopup","current","scrollIntoView","populateLocationsFromGoogleSheets","getLocationsFromGoogleSheets","Button","style","handleGetMyLocation","filterByDistance","Input","basic","content","value","onChange","handleFilterRadiusChanged","navigator","geolocation","getCurrentPosition","pos","crd","coords","latitude","longitude","err","alert","event","target","_latlng","distanceToMarker","distanceToLocationMeters","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5078dacf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\nclass PageHeader extends React.Component {\r\n  render() {\r\n    return (\r\n      <Message size=\"tiny\">\r\n        <Message.Header>Page Header</Message.Header>\r\n        <p>Hello friends,</p>\r\n        <p>\r\n          As y'all probably know, the COVID19 crisis is hitting everyone hard, especially small businesses. A\r\n          lot of restaurants/food services are switching to takeout/delivery only, or closing. It'd be pretty\r\n          sick if we could support them, so I've started a crowdsourcing spreadsheet for all the Asian\r\n          restaurants/businesses in Edmonton that are open for pickup or takeout 😁 that everyone can use, or\r\n          contribute to. I'd be pretty sad if all my fav places were closed in 2 months, so pls help a girl\r\n          out and try to prevent that from happening.\r\n        </p>\r\n        <p>\r\n          Right now it's only Asian restaurants because they have been the hardest-hit, but I'll expand to\r\n          other restaurants/services if there's enough interest. After this Coronavirus crisis is over, I\r\n          guess this will just become a master list of all the Asian restaurants in Edmonton, which isn't a\r\n          bad thing to have either. I'll be ordering from Blue Quill Chinese Food because when I called to ask\r\n          about their takeout policy, the owner told me a very elaborate story about how her delivery guy was\r\n          drinking and broke his leg. She hired a new delivery guy, but he's apparently very slow, so pickups\r\n          are preferred unless you're ok with waiting. Fortunately, I am, and that kind of humour is right up\r\n          my alley. Anyways, thanks for listening to my TED talk. Share this with friends. Eat some good food.\r\n          I'll keep y'all posted with updates.\r\n        </p>\r\n      </Message>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PageHeader;\r\n","function distanceInKmBetweenEarthCoordinates(lat1, lon1, lat2, lon2) {\r\n  const { sin, cos, sqrt, atan2, PI } = Math;\r\n  function degreesToRadians(degrees) {\r\n    return (degrees * PI) / 180;\r\n  }\r\n\r\n  const earthRadiusKm = 6371;\r\n\r\n  const dLat = degreesToRadians(lat2 - lat1);\r\n  const dLon = degreesToRadians(lon2 - lon1);\r\n\r\n  const lat1x = degreesToRadians(lat1);\r\n  const lat2x = degreesToRadians(lat2);\r\n\r\n  const a = sin(dLat / 2) * sin(dLat / 2) + sin(dLon / 2) * sin(dLon / 2) * cos(lat1x) * cos(lat2x);\r\n  const c = 2 * atan2(sqrt(a), sqrt(1 - a));\r\n  return earthRadiusKm * c;\r\n}\r\n\r\nclass Location {\r\n  // Data class representing one row from the Google Sheets Document.\r\n  constructor(entry) {\r\n    function getGSXValue(key) {\r\n      return entry[`gsx$${key}`].$t;\r\n    }\r\n    // Unpacks interesting entries from the Google Sheets JSON API into a simpler object.\r\n    this.id = entry.id.$t;\r\n    this.shouldBeShown = true;\r\n\r\n    this.name = getGSXValue(\"name\");\r\n    this.status = getGSXValue(\"status\");\r\n    this.cusine = getGSXValue(\"cusine\");\r\n    this.area = getGSXValue(\"area\");\r\n    this.hours = getGSXValue(\"hours-unsureofcovid-19hours\");\r\n    this.delivery = getGSXValue(\"delivery\");\r\n    this.pickup = getGSXValue(\"pickup\");\r\n    this.giftcards = getGSXValue(\"giftcards\");\r\n    this.dietaryNeeds = getGSXValue(\"dietaryneedsserved\");\r\n    this.address = getGSXValue(\"address\");\r\n    this.comments = getGSXValue(\"comments\");\r\n    this.website = getGSXValue(\"website\");\r\n    this.deliverySite = getGSXValue(\"deliverysite\");\r\n    this.fantuan = getGSXValue(\"fantuan\");\r\n    this.lat = getGSXValue(\"lat\");\r\n    this.long = getGSXValue(\"long\");\r\n  }\r\n\r\n  hasLocationData() {\r\n    return !!this.lat && !!this.long;\r\n  }\r\n\r\n  distanceToLocationMeters(lat, long) {\r\n    return distanceInKmBetweenEarthCoordinates(lat, long, this.lat, this.long) * 1000;\r\n  }\r\n\r\n  get googleMapsLink() {\r\n    return `https://google.com/maps/search/${this.address}`;\r\n  }\r\n\r\n  // TODO: Probably add some functionality to unpack attributes (addresses, hours, cusine types etc...)\r\n  // TODO: Maybe add resolvers to Google Maps, Food Delivery etc...\r\n}\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport L from \"leaflet\";\r\n\r\nimport { Map, Marker, Popup, TileLayer, Circle } from \"react-leaflet\";\r\n\r\nconst commonIconProperties = {\r\n  iconSize: [18, 25],\r\n  iconAnchor: [12, 25],\r\n  popupAnchor: [1, -30],\r\n  shadowSize: [25, 25],\r\n  shadowUrl: \"https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png\",\r\n};\r\n\r\nconst greenIcon = new L.Icon({\r\n  ...commonIconProperties,\r\n  iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png\",\r\n});\r\n\r\nconst yellowIcon = new L.Icon({\r\n  ...commonIconProperties,\r\n  iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-yellow.png\",\r\n});\r\n\r\nconst redIcon = new L.Icon({\r\n  ...commonIconProperties,\r\n  iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png\",\r\n});\r\n\r\nconst orangeIcon = new L.Icon({\r\n  ...commonIconProperties,\r\n  iconUrl: \"https://cdn.rawgit.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-orange.png\",\r\n});\r\n\r\nconst statusIcons = {\r\n  Open: greenIcon,\r\n  \"Appears Closed\": orangeIcon,\r\n  Closed: redIcon,\r\n  \"\": yellowIcon,\r\n};\r\n\r\nclass LocationsMap extends React.Component {\r\n  // Leaflet map used to display locations. Uses a combination of 'leaflet' and 'react-leaflet' to render.\r\n\r\n  render() {\r\n    const userPosition = [this.props.lat, this.props.lng];\r\n    const locationsWithMapData = this.props.locations.filter((location) => {\r\n      return location.hasLocationData() && location.shouldBeShown;\r\n    });\r\n\r\n    return (\r\n      <Map center={userPosition} zoom={this.props.zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        <Marker position={userPosition} draggable={true} onDragend={this.props.handleMarkerDragEnd} />\r\n        <Circle center={userPosition} radius={this.props.filterRadius * 1000} />\r\n        {locationsWithMapData.map(this.renderLocationMarker.bind(this))}\r\n      </Map>\r\n    );\r\n  }\r\n\r\n  renderLocationMarker = (location) => {\r\n    // Helper function to render location map markers.\r\n    const generateBoldedField = (label, data) => (\r\n      <div>\r\n        <b>{label}: </b>\r\n        {data || \"--\"}\r\n      </div>\r\n    );\r\n\r\n    const icon = statusIcons[location.status] || yellowIcon;\r\n\r\n    const websiteLink = location.website ? <a href={location.website}>ResturantWebsite</a> : \"\";\r\n    const deliverySiteLink = location.deliverySite ? <a href={location.deliverySite}>Delivery</a> : \"\";\r\n    const fantuanLink = location.fantuan ? <a href={location.fantuan}>Fantuan</a> : \"\";\r\n\r\n    return (\r\n      <Marker\r\n        ref={(ref) => this.props.setRef(location.name, ref)}\r\n        key={location.name}\r\n        position={[location.lat, location.long]}\r\n        icon={icon}\r\n      >\r\n        <Popup>\r\n          <h5>{location.name}</h5>\r\n          <span>\r\n            <a href={location.googleMapsLink}>GoogleMaps</a> {websiteLink} {deliverySiteLink} {fantuanLink}\r\n          </span>\r\n          <hr />\r\n          {generateBoldedField(\"Address\", location.address)}\r\n          {generateBoldedField(\"Hours\", location.hours)}\r\n          {generateBoldedField(\"Cusine\", location.cusine)}\r\n          {generateBoldedField(\"Notes\", location.comments)}\r\n        </Popup>\r\n      </Marker>\r\n    );\r\n  };\r\n}\r\n\r\nexport default LocationsMap;\r\n","import React from \"react\";\r\n\r\nimport { Table, Label } from \"semantic-ui-react\";\r\n\r\nclass LocationsTable extends React.Component {\r\n  // Renders a table from an array of locations.\r\n\r\n  // Table to display list of locations\r\n  static keysToInclude = [\r\n    \"name\",\r\n    \"status\",\r\n    \"cusine\",\r\n    \"hours\",\r\n    \"delivery\",\r\n    \"pickup\",\r\n    \"giftcards\",\r\n    \"dietaryNeeds\",\r\n    \"comments\",\r\n  ];\r\n\r\n  static keysToColumnNames = {\r\n    name: \"Business Name\",\r\n    status: \"Status\",\r\n    cusine: \"Cusine\",\r\n    hours: \"Hours\",\r\n    delivery: \"Delivery\",\r\n    pickup: \"Pickup\",\r\n    giftcards: \"Gift Cards\",\r\n    dietaryNeeds: \"Diet Needs\",\r\n    address: \"Address\",\r\n    comments: \"Notes\",\r\n  };\r\n\r\n  render() {\r\n    const locationsTodisplay = this.props.locations.filter((location) => location.shouldBeShown);\r\n\r\n    return (\r\n      <Table compact size=\"small\">\r\n        <Table.Header>\r\n          {LocationsTable.keysToInclude.map((key) => (\r\n            <Table.HeaderCell key={`header:${key}`}>{LocationsTable.keysToColumnNames[key]}</Table.HeaderCell>\r\n          ))}\r\n        </Table.Header>\r\n        <Table.Body>{locationsTodisplay.map(this.renderTableRow)}</Table.Body>;\r\n      </Table>\r\n    );\r\n  }\r\n\r\n  renderTableRow = (location) => {\r\n    const locationHasSkipOrUberEats = !!location.deliverySite;\r\n    const locationHasFantuan = !!location.fantuan;\r\n    const deliveryIsUberEats = !!location.deliverySite && location.deliverySite.includes(\"ubereats.com\");\r\n    return (\r\n      <Table.Row\r\n        key={location.name}\r\n        className=\"location-data-row\"\r\n        onClick={() => this.props.onRowClick(location.name)}\r\n      >\r\n        {LocationsTable.keysToInclude.map((key) => {\r\n          if (key === \"delivery\" && locationHasSkipOrUberEats) {\r\n            return (\r\n              <Table.Cell>\r\n                <Label\r\n                  as=\"a\"\r\n                  href={location.deliverySite}\r\n                  color={deliveryIsUberEats ? \"green\" : \"red\"}\r\n                  size=\"mini\"\r\n                >\r\n                  {deliveryIsUberEats ? \"UberEats\" : \"SkipTheDishes\"}\r\n                </Label>\r\n                {locationHasFantuan ? (\r\n                  <Label as=\"a\" href={location.fantuan} color=\"yellow\" size=\"mini\">\r\n                    Fantuan\r\n                  </Label>\r\n                ) : (\r\n                  \"\"\r\n                )}\r\n              </Table.Cell>\r\n            );\r\n          }\r\n\r\n          return <Table.Cell key={`${location.name}:${key}`}>{location[key]}</Table.Cell>;\r\n        })}\r\n      </Table.Row>\r\n    );\r\n  };\r\n}\r\n\r\nexport default LocationsTable;\r\n","export const urls = {\r\n  spreadsheetID: \"1YvbMUEEGha3hEQ6CDd0K1C4WVkAMmszbBRuRQ-ndxKU\",\r\n  worksheetID: \"oc6o2es\",\r\n  get googleSheetsURL() {\r\n    return `https://spreadsheets.google.com/feeds/list/${this.spreadsheetID}/${this.worksheetID}/public/values?alt=json`;\r\n  },\r\n};\r\n\r\nexport const cssClasses = {\r\n  mapContainer: \"map-container\",\r\n  mapControls: \"map-buttons\",\r\n  mapButtons: \"ui button\",\r\n};\r\n\r\nexport const defaultStates = {\r\n  app: {\r\n    isFilterSet: false,\r\n    locations: [],\r\n    lat: 53.5461,\r\n    lng: -113.4938,\r\n    zoom: 11,\r\n    filterRadius: 5,\r\n  },\r\n};\r\n\r\nexport const defaultProps = {\r\n  locationSlider: {\r\n    type: \"range\",\r\n    labelPosition: \"right\",\r\n\r\n    min: 1,\r\n    max: 10,\r\n    step: 0.1,\r\n  },\r\n};\r\n\r\nexport const simpleStyles = {\r\n  greenFloatLeft: { backgroundColor: \"limegreen\", float: \"left\" },\r\n  greenFloatRight: { backgroundColor: \"limegreen\", float: \"right\" },\r\n};\r\n\r\nexport const labels = {\r\n  getCurrentLocation: \"My Location\",\r\n  filterNearLocation: \"Filter Near Location\",\r\n  resetLocationFilter: \"Reset Location Filter\",\r\n};\r\n","import React from \"react\";\r\nimport { Button, Input } from \"semantic-ui-react\";\r\n\r\nimport \"semantic-ui-css/semantic.min.css\";\r\nimport \"./App.css\";\r\n\r\nimport PageHeader from \"./components/PageHeader\";\r\nimport Location from \"./models/Location\";\r\nimport LocationsMap from \"./components/LocationsMap\";\r\nimport LocationsTable from \"./components/LocationsTable\";\r\n\r\nimport { urls, simpleStyles, cssClasses, defaultStates, defaultProps, labels } from \"./config/AppConfig.js\";\r\n\r\nclass GoogleSheetsParser {\r\n  // Handler for requesting and parsing Google Sheets lists requests.\r\n  static async getLocationsFromGoogleSheets() {\r\n    const response = await fetch(urls.googleSheetsURL);\r\n    const json = await response.json();\r\n\r\n    const entriesJSON = json.feed.entry;\r\n    return entriesJSON.map((entry) => {\r\n      return new Location(entry);\r\n    });\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  state = { ...defaultStates.app };\r\n  mapPopupRefs = new Map();\r\n  mapContainerRef = React.createRef();\r\n\r\n  setRef = (key, ref) => {\r\n    this.mapPopupRefs.set(key, ref);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.populateLocationsFromGoogleSheets();\r\n  }\r\n\r\n  async populateLocationsFromGoogleSheets() {\r\n    this.setState({\r\n      locations: await GoogleSheetsParser.getLocationsFromGoogleSheets(),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <PageHeader></PageHeader>\r\n        <div ref={this.mapContainerRef} className={cssClasses.mapContainer}>\r\n          <LocationsMap\r\n            {...this.state}\r\n            handleMarkerDragEnd={this.handleMarkerDragEnd.bind(this)}\r\n            setRef={this.setRef}\r\n          ></LocationsMap>\r\n\r\n          <hr />\r\n          <div className={cssClasses.mapControls}>\r\n            <Button\r\n              className={cssClasses.mapButtons}\r\n              style={simpleStyles.greenFloatLeft}\r\n              onClick={this.handleGetMyLocation.bind(this)}\r\n            >\r\n              {labels.getCurrentLocation}\r\n            </Button>\r\n            <Button\r\n              className={cssClasses.mapButtons}\r\n              onClick={this.filterByDistance.bind(this)}\r\n              style={simpleStyles.greenFloatLeft}\r\n            >\r\n              Filter To Locations Near Me\r\n            </Button>\r\n            <Input\r\n              {...defaultProps.locationSlider}\r\n              label={{\r\n                basic: true,\r\n                content: `Within ${this.state.filterRadius} Km`,\r\n              }}\r\n              value={this.state.filterRadius}\r\n              onChange={this.handleFilterRadiusChanged.bind(this)}\r\n              style={simpleStyles.greenFloatLeft}\r\n            />\r\n            <Button\r\n              className={cssClasses.mapButtons}\r\n              onClick={this.resetLocationFilter.bind(this)}\r\n              style={simpleStyles.greenFloatRight}\r\n            >\r\n              Show All Locations\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <LocationsTable\r\n          locations={this.state.locations}\r\n          onRowClick={this.openMapPopupByName.bind(this)}\r\n        ></LocationsTable>\r\n      </div>\r\n    );\r\n  }\r\n  handleGetMyLocation() {\r\n    const success = (pos) => {\r\n      const crd = pos.coords;\r\n      this.setState({ lat: crd.latitude, lng: crd.longitude });\r\n      this.filterByDistance();\r\n    };\r\n\r\n    const error = (err) => {\r\n      alert(\"We couldn't seem to get your location. Did you enable some sort of privacy mode?\");\r\n    };\r\n\r\n    navigator.geolocation.getCurrentPosition(success, error);\r\n  }\r\n\r\n  handleMarkerDragEnd(event) {\r\n    const { lat, lng } = event.target._latlng;\r\n    this.setState({ lat, lng });\r\n    this.filterByDistance();\r\n  }\r\n\r\n  handleFilterRadiusChanged(event) {\r\n    this.setState({ filterRadius: event.target.value });\r\n    this.filterByDistance();\r\n  }\r\n\r\n  filterByDistance() {\r\n    const updatedLocations = this.state.locations.map((location) => {\r\n      const distanceToMarker = location.distanceToLocationMeters(this.state.lat, this.state.lng);\r\n      location.shouldBeShown = distanceToMarker <= this.state.filterRadius * 1000 ? true : false;\r\n\r\n      return location;\r\n    });\r\n\r\n    this.setState({ locations: updatedLocations });\r\n  }\r\n\r\n  resetLocationFilter = () => {\r\n    const updatedLocations = this.state.locations.map((location) => {\r\n      location.shouldBeShown = true;\r\n      return location;\r\n    });\r\n\r\n    this.setState({ locations: updatedLocations });\r\n  };\r\n\r\n  openMapPopupByName = (name) => {\r\n    const popupRef = this.mapPopupRefs.get(name);\r\n    if (popupRef && popupRef.leafletElement) {\r\n      popupRef.leafletElement.openPopup();\r\n      this.mapContainerRef.current.scrollIntoView(false);\r\n    }\r\n  };\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}